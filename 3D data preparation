##### Mousa Moradi_ Ph.D. student, biomedical engineering UMASS AMHESRT, UMASS MEDICAL SCHOOL WORCESTER
## Prepare 3D data + Image processing
from skimage import io
from patchify import patchify, unpatchify
import numpy as np
from matplotlib import pyplot as plt
from tensorflow.keras import backend as K
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from skimage import exposure, io, util, measure
from skimage import img_as_ubyte


############ Using SCIKIT-IMAGE
#### The images must be stacked in a tif format file before loading

#sk_3dimg = io.imread('train_stack_g1.tif')

sk_3dimg=img_as_ubyte(sk_3dimg)
X_data = io.imread(r'B:\Macular cube data\allinone_g1\cube_all\folders\tif\*.tif')
X_data[1].shape
def show_plane(ax, plane, cmap="gray", title=None):
    ax.imshow(plane, cmap=cmap)
    ax.axis("off")

    if title:
        ax.set_title(title)
       
 
(ch, n_plane, n_row, n_col) = X_data.shape
_, (a, b, c) = plt.subplots(ncols=3, figsize=(15, 5))

show_plane(a, X_data[1][n_plane // 2], title=f'Plane = {n_plane // 2}')
show_plane(b, X_data[1][:, n_row // 2, :], title=f'Row = {n_row // 2}')
show_plane(c, X_data[1][:, :, n_col // 2], title=f'Column = {n_col // 2}')

def display(im3d, cmap="gray", step=2):
    _, axes = plt.subplots(nrows=5, ncols=6, figsize=(16, 14))

    vmin = im3d.min()
    vmax = im3d.max()

    for ax, image in zip(axes.flatten(), im3d[::step]):
        ax.imshow(image, cmap=cmap, vmin=vmin, vmax=vmax)
        ax.set_xticks([])
        ax.set_yticks([])


display(X_data[1])

#Some modules in skimage and opencv can work with 3D images. 
#But not necessarily peforming 3D operations. 

from skimage.filters import gaussian
gaussian_smoothed = gaussian(sk_3dimg)

fig = plt.figure(figsize=(12, 12))
ax1 = fig.add_subplot(2,2,1)
ax1.imshow(sk_3dimg[60,:,:],cmap='gray')
ax1.title.set_text('Original')
ax2 = fig.add_subplot(2,2,2)
ax2.imshow(gaussian_smoothed[60,:,:],cmap='gray')
ax2.title.set_text('Smoothed')

####### Apply CLAHE on all images in each cube
enh = []
for image in range(g1.shape[0]):
    input_img = g1[image,:,:]  #Grey images. For color add another dim.
    
    resized = cv2.resize(input_img, (1536, 768), interpolation = cv2.INTER_AREA)

    clahe = cv2.createCLAHE(clipLimit=2, \
                    tileGridSize=(16,16))
    

    equ=clahe.apply(resized)
    equ = cv2.cvtColor(equ,cv2.COLOR_BGR2RGB)
    equ = cv2.cvtColor(equ, cv2.COLOR_RGB2GRAY)

    enh.append(equ)
    
processed_img_g1 = np.array(enh)

#display(processed_img)

#plt.imshow(processed_img[100,:,:], cmap='gray')

io.imsave('C:/Users/MOUSAMORADI/retina/classification_3D/processed_img_g1.tif', processed_img_g1)
enh = []
for image in range(g2.shape[0]):
    input_img = g2[image,:,:]  #Grey images. For color add another dim.
    
    resized = cv2.resize(input_img, (1536, 768), interpolation = cv2.INTER_AREA)

    clahe = cv2.createCLAHE(clipLimit=2, \
                    tileGridSize=(16,16))
    

    equ=clahe.apply(resized)
    equ = cv2.cvtColor(equ,cv2.COLOR_BGR2RGB)
    equ = cv2.cvtColor(equ, cv2.COLOR_RGB2GRAY)

    enh.append(equ)
    
processed_img_g2 = np.array(enh)

#display(processed_img)

#plt.imshow(processed_img[100,:,:], cmap='gray')

io.imsave('C:/Users/MOUSAMORADI/retina/classification_3D/processed_img_g2.tif', processed_img_g2)

enh = []
for image in range(g3.shape[0]):
    input_img = g3[image,:,:]  #Grey images. For color add another dim.
    
    resized = cv2.resize(input_img, (1536, 768), interpolation = cv2.INTER_AREA)

    clahe = cv2.createCLAHE(clipLimit=2, \
                    tileGridSize=(16,16))
    

    equ=clahe.apply(resized)
    equ = cv2.cvtColor(equ,cv2.COLOR_BGR2RGB)
    equ = cv2.cvtColor(equ, cv2.COLOR_RGB2GRAY)

    enh.append(equ)
    
processed_img_g3 = np.array(enh)

#display(processed_img)

#plt.imshow(processed_img[100,:,:], cmap='gray')

io.imsave('C:/Users/MOUSAMORADI/retina/classification_3D/processed_img_g3.tif', processed_img_g3)
